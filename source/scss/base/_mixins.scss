/**
 * Uses breakpoint variables in _base.scss
 */

@mixin respond-to($media) {
    @if $media == midmobile {
        @media only screen and (min-width: ($break-midmobile / 16) + 'em') { 
           @content;
        }
    } 
    @if $media == small-screens {
        @media only screen and (min-width: ($break-small / 16) + 'em') { 
           @content;  
        }
    } 
    @if $media == medium-screens {
        @media only screen and (min-width: ($break-medium / 16) + 'em') { 
           @content;
        }
    } 
    @if $media == large-screens {
        @media only screen and (min-width: ($break-large / 16) + 'em') { 
           @content;
        }
    }
    @if $media == up-to-large-screens {
        @media only screen and (max-width: (($break-large - 1) / 16) + 'em') { 
           @content;
        }
    }  
    @if $media == xlarge-screens {
        @media only screen and (min-width: ($break-xlarge / 16) + 'em') { 
           @content;
        }  
    }  
    @if $media == wide-screens {
        @media only screen and (min-width: ($break-wide / 16) + 'em') { 
           @content;
        }
    }
    @if $media == xwide-screens {
        @media only screen and (min-width: ($break-xwide / 16) + 'em') { 
           @content;
        } 
    }
    @if $media == xxwide-screens {
        @media only screen and (min-width: ($break-xxwide / 16) + 'em') { 
           @content;
        }
    }
    @if $media == r-u-insane {
        @media only screen and (min-width: ($break-r-u-insane / 16) + 'em') { 
           @content;
        }
    }
}

// Mixin: REM to Px
@function remToPx($number) {
    @return #{$number}rem;
}

%clearfix, %group {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}